FILE NAME:-  mpi_avg.c

#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ARRAY_SIZE 100

void initialize_array(double *array, int size) {
    srand(time(NULL));
    for (int i = 0; i < size; i++) {
        array[i] = (double)rand() / RAND_MAX;
    }
}

int main(int argc, char *argv[]) {
    int rank, size;
    double *array = NULL;
    double *sub_array;
    int sub_size;
    double sub_sum = 0.0;
    double *total_sums = NULL;
    double avg = 0.0;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    sub_size = ARRAY_SIZE / size;
    sub_array = (double *)malloc(sub_size * sizeof(double));

    if (rank == 0) {
        array = (double *)malloc(ARRAY_SIZE * sizeof(double));
        initialize_array(array, ARRAY_SIZE);
    }

    // Scatter the array to all processes
    MPI_Scatter(array, sub_size, MPI_DOUBLE, sub_array, sub_size, MPI_DOUBLE, 0, MPI_COMM_WORLD);

    // Calculate the local sum
    for (int i = 0; i < sub_size; i++) {
        sub_sum += sub_array[i];
    }

    // Gather the local sums at the root process
    if (rank == 0) {
        total_sums = (double *)malloc(size * sizeof(double));
    }
    MPI_Gather(&sub_sum, 1, MPI_DOUBLE, total_sums, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);

    // Compute and print the average at the root process
    if (rank == 0) {
        double total_sum = 0.0;
        for (int i = 0; i < size; i++) {
            total_sum += total_sums[i];
        }
        avg = total_sum / ARRAY_SIZE;
        printf("Avg of all elements is %f\n", avg);
        free(total_sums); // Free the total_sums array
    }

    free(sub_array);
    if (rank == 0) {
        free(array);
    }

    MPI_Finalize();
    return 0;
}

COMP:-  mpicc -o mpi_avg mpi_avg.c
EXEC:-  mpirun -np <number_of_processes> ./mpi_avg <num_elements_per_proc>
:- mpirun -np 4 ./mpi_avg 
O/P:-
Avg of all elements is 0.468800

!apt-get update
!apt-get install -y mpich
!apt-get install -y python3-mpi4py

import os
os.environ['OMPI_ALLOW_RUN_AS_ROOT'] = '1'
os.environ['OMPI_ALLOW_RUN_AS_ROOT_CONFIRM'] = '1'

GC:- %%writefile mpi_avg.c, !mpicc -o mpi_avg mpi_avg.c, !mpirun --oversubscribe -np 4 ./mpi_avg
